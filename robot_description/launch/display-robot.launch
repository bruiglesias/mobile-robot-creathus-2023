<?xml version="1.0"?>
<launch>

    <!-- RVIZ CONFIG -->
    <arg name="rviz_config_file" default="$(find robot_description)/rviz/spawn-robot.rviz"/>

    <!-- SPAWN THE ROBOT -->
    <param name="robot_description" command="xacro '$(find robot_description)/urdf/v2/robot.xacro'" />

    <!-- JOINT AND STATE ROBOT PUBLISERS -->
    <include file="$(find robot_description)/launch/state-robot.launch" />

   <!-- START SICKS-->	  
   <include file="$(find robot_integrations)/src/launch/sick-lasers.launch" />

    <!-- IRA LASERS FUSION -->
    <!--include file="$(find ira_laser_tools)/launch/laserscan_multi_merger.launch" /-->

    <!-- LASER ODOMETRY -->
    <!--include file="$(find rf2o_laser_odometry)/launch/rf2o_laser_odometry.launch" /> -->

    <!-- LASER FILTER (REDUZ O ANGULO MAX DO LASER DA FRENTE ) -->
    <node name="front_laser_filter" pkg="robot_integrations" type="read_front_laser.py" output="screen"/>
    
    <!-- DATA IMU ESP32 -->
    <node name="imu_data" pkg="rosserial_python" type="serial_node.py" output= "screen">
        <param name="port" value="/dev/ttyACM0"/>  
        <param name="baud" value="57600"/>
        <!-- rosrun rosserial_python serial_node.py _port:=/dev/ttyACM0 _baud:=57600 -->
    </node>


    <!-- DATA ENCODER -->
    <node name="encoder_filtered" pkg="robot_integrations" type="EncoderSubscriber.py" output= "screen"/>


    <!-- ODOMETRY: IMU+ENCONDER -->
    <node name="odom_hybrid" pkg="robot_integrations" type="odom_imu2" output= "screen">
        <param name="alpha" value="0.0" />
        <param name="use_imu" value="true" />
    </node>

    <!-- Differential Controller -->
    <node name="robot_controller" pkg="robot_integrations" type="DifferentialRobotController.py" output="screen"/>
   
    <!--POINTS MANAGER -->
    <node name="points_controller" pkg="robot_navigation" type="manager_goals.py" output="screen"/>
    
    <!-- MONTE CARLO LOCALIZATION -->
    <include file="$(find robot_navigation)/launch/amcl_localization.launch" />

    <!-- LOAD LAST POSE -->
    <!-- node name="robot_pose_saver" pkg="robot_navigation" type="saver_position_orientation.py" output="screen" /-->

    <!-- LASER ODOMETRY -->
    <include file="$(find rf2o_laser_odometry)/launch/rf2o_laser_odometry.launch" />

    <node name="robot_state_button_a" pkg="robot_integrations" type="read_state_button_a.py" output="screen"/>
    <node name="robot_state_button_b" pkg="robot_integrations" type="read_state_button_b.py" output="screen"/>
    <node name="robot_state_button_c" pkg="robot_integrations" type="read_state_button_c.py" output="screen"/>

    <!--PATH CONTROLLER-->
    <node name="path_controller" pkg="robot_integrations" type="complete_controller.py" output="screen"/>
</launch>
